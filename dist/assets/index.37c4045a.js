import{t as e,C as t,S as r,W as i,a,b as n,c as o,P as s,O as c,I as l,B as h,G as d,d as m,e as u,M as f,f as v}from"./vendor.a48c433e.js";const w={geometry:"icosahedron",uColor:"#ffffff",uRefractionRatio:.88,uFresnelBias:0,uFresnelPower:1,uFresnelScale:.33,uBackfaceVisibility:.33},g=new e.exports.Pane;g.addInput(w,"geometry",{label:"Geometry",options:{Icosahedron:"icosahedron",Box:"box",Diamond:"diamond"}}),g.addInput(w,"uColor",{picker:"inline"}),g.addInput(w,"uRefractionRatio",{min:0,max:1,step:.01}),g.addInput(w,"uFresnelBias",{min:0,max:1,step:.01}),g.addInput(w,"uFresnelPower",{min:0,max:1,step:.01}),g.addInput(w,"uFresnelScale",{min:0,max:1,step:.01}),g.addInput(w,"uBackfaceVisibility",{min:0,max:.33,step:.01}),g.on("change",(e=>{"geometry"===e.presetKey&&("icosahedron"===e.value?(b.mesh.geometry=b.icosahedronGeometry,b.backfaceMesh.geometry=b.icosahedronGeometry):"box"===e.value?(b.mesh.geometry=b.boxGeometry,b.backfaceMesh.geometry=b.boxGeometry):"diamond"===e.value&&(b.mesh.geometry=b.diamondGeometry,b.backfaceMesh.geometry=b.diamondGeometry))}));const b=new class{constructor(){this.width=window.innerWidth,this.height=window.innerHeight,this.clock=new t,this.setRenderer(),this.setBackground(),this.setCamera(),this.addGeometry(),this.render()}setRenderer(){this.scene=new r,this.backfaceScene=new r,this.renderer=new i({canvas:document.getElementById("canvas"),antialias:!0,alpha:!0}),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.renderer.setSize(this.width,this.height),this.renderer.autoClear=!1,this.renderer.capabilities.isWebGL2?this.backfaceRenderTarget=new a(this.width,this.height):this.backfaceRenderTarget=new n(this.width,this.height),window.addEventListener("resize",(()=>{this.width=window.innerWidth,this.height=window.innerHeight,this.renderer.setSize(this.width,this.height),this.backfaceRenderTarget.setSize(this.width,this.height),this.camera.aspect=this.width/this.height,this.camera.updateProjectionMatrix(),this.mesh.material.uniforms.uResolution.value=[this.width*this.renderer.getPixelRatio(),this.height*this.renderer.getPixelRatio()]}))}setBackground(){this.cubemap=(new o).load(["/assets/px.519f642f.jpg","/assets/nx.03d96dfb.jpg","/assets/py.4442685d.jpg","/assets/ny.b93a2e1c.jpg","/assets/pz.59e03537.jpg","/assets/nz.397c61b7.jpg"]),this.scene.background=this.cubemap}setCamera(){this.camera=new s(60,this.width/this.height,.1,100),this.camera.position.set(0,0,5),this.controls=new c(this.camera,this.renderer.domElement),this.controls.enableDamping=!0}addGeometry(){this.icosahedronGeometry=new l(1.2),this.boxGeometry=new h(1.75,1.75,1.75);(new d).load("/assets/diamond.30cb4179.glb",(e=>{this.diamondGeometry=e.scene.children[0].geometry,this.diamondGeometry.translate(0,-4,0),this.diamondGeometry.scale(.25,.25,.25)}));const e=new m({vertexShader:"\nvarying vec3 vWorldNormal;\n\nvoid main() {\n\n    vWorldNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\n    vWorldNormal = -normalize(vec3(-vWorldNormal.x, vWorldNormal.yz));\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}",fragmentShader:"\nvarying vec3 vWorldNormal;\n\nvoid main() {\n\n    gl_FragColor.rgb = vWorldNormal;\n\n}",side:u});this.backfaceMesh=new f(this.icosahedronGeometry,e),this.backfaceScene.add(this.backfaceMesh);const t=new m({vertexShader:"\nvarying vec3 worldNormal;\nvarying vec3 viewDirection;\n\nvoid main() {\n\n\tvec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n\tvec4 worldPosition = modelMatrix * vec4(position, 1.0);\n\n\tworldNormal = normalize(mat3(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz) * normal);\n\tviewDirection = worldPosition.xyz - cameraPosition;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n}",fragmentShader:"\nuniform samplerCube tCube;\nuniform sampler2D uBackfaceMap;\nuniform vec2 uResolution;\n\nuniform vec3 uColor;\nuniform float uRefractionRatio;\nuniform float uFresnelBias;\nuniform float uFresnelScale;\nuniform float uFresnelPower;\nuniform float uBackfaceVisibility;\n\nvarying vec3 worldNormal;\nvarying vec3 viewDirection;\n\nvoid main() {\n\n\t// Backface Normals\n\tvec3 backfaceNormal = texture2D(uBackfaceMap, gl_FragCoord.xy / uResolution).rgb;\n\n\t// Reflection\n\tvec3 vReflect = reflect(viewDirection, worldNormal);\n\tfloat vReflectionFactor = uFresnelBias + uFresnelScale * pow(1.0 + dot(normalize(viewDirection), worldNormal), uFresnelPower);\n\n\t// Refraction\n\tvec3 vRefract[3];\n\tvec3 normal = worldNormal * (1.0 - uBackfaceVisibility) - backfaceNormal * uBackfaceVisibility;\n\tvRefract[0] = refract(normalize(viewDirection), normal, uRefractionRatio);\n\tvRefract[1] = refract(normalize(viewDirection), normal, uRefractionRatio * 0.99);\n\tvRefract[2] = refract(normalize(viewDirection), normal, uRefractionRatio * 0.98);\n\n\t// Reflected Color\n\tvec4 reflectedColor = textureCube(tCube, vec3(-vReflect.x, vReflect.yz)) * vec4(5.0); // Add some white\n\n\t// Refracted Color\n\tvec4 refractedColor = vec4(1.0);\n\trefractedColor.r = textureCube(tCube, vec3(-vRefract[0].x, vRefract[0].yz)).r;\n\trefractedColor.g = textureCube(tCube, vec3(-vRefract[1].x, vRefract[1].yz)).g;\n\trefractedColor.b = textureCube(tCube, vec3(-vRefract[2].x, vRefract[2].yz)).b;\n\n\tgl_FragColor = mix(refractedColor, reflectedColor, clamp(vReflectionFactor, 0.0, 1.0)) * vec4(uColor, 1.0);\n\n}",uniforms:{tCube:{value:this.cubemap},uBackfaceMap:{value:this.backfaceRenderTarget.texture},uColor:{value:new v(w.uColor)},uRefractionRatio:{value:w.uRefractionRatio},uFresnelBias:{value:w.uFresnelBias},uFresnelPower:{value:w.uFresnelPower},uFresnelScale:{value:w.uFresnelScale},uBackfaceVisibility:{value:w.uBackfaceVisibility},uResolution:{value:[this.width*this.renderer.getPixelRatio(),this.height*this.renderer.getPixelRatio()]}}});this.mesh=new f(this.icosahedronGeometry,t),this.scene.add(this.mesh)}render(){this.controls.update(),this.mesh.material.uniforms.uColor.value=new v(w.uColor),this.mesh.material.uniforms.uRefractionRatio.value=w.uRefractionRatio,this.mesh.material.uniforms.uFresnelBias.value=w.uFresnelBias,this.mesh.material.uniforms.uFresnelPower.value=w.uFresnelPower,this.mesh.material.uniforms.uFresnelScale.value=w.uFresnelScale,this.mesh.material.uniforms.uBackfaceVisibility.value=w.uBackfaceVisibility,this.renderer.setRenderTarget(this.backfaceRenderTarget),this.renderer.clearDepth(),this.renderer.render(this.backfaceScene,this.camera),this.renderer.setRenderTarget(null),this.renderer.clearDepth(),this.renderer.render(this.scene,this.camera),requestAnimationFrame((()=>{this.render()}))}};
